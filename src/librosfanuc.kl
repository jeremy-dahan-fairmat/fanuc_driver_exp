
-- Copyright (c) 2017, TU Delft Robotics Institute
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.


PROGRAM librosfanuc
--------------------------------------------------------------------------------
-- 
-- librosfanuc implementation.
--
-- Utility functions to convert from and to ROS and Fanuc data structures
-- and types.
-- 
-- author: G.A. vd. Hoorn (TU Delft Robotics Institute)
-- 
--------------------------------------------------------------------------------
%ALPHABETIZE
%COMMENT = 'ROS//r3b'
%NOBUSYLAMP
%NOLOCKGROUP
%NOPAUSE = COMMAND + TPENABLE + ERROR




--------------------------------------------------------------------------------
-- 
-- local types & constants
-- 
--------------------------------------------------------------------------------
%INCLUDE rosfanuc\rosfanuc.klt




--------------------------------------------------------------------------------
--
-- remote routine prototypes
--
--------------------------------------------------------------------------------
%INCLUDE klrdutil.kl




--------------------------------------------------------------------------------
-- 
-- local routine prototypes
-- 
--------------------------------------------------------------------------------
%INCLUDE rosfanuc\rosfanuc.klh




--------------------------------------------------------------------------------
-- 
-- Empty body
-- 
--------------------------------------------------------------------------------
BEGIN
END librosfanuc




ROUTINE arr_rad2deg
VAR
	i__          : INTEGER
BEGIN
	FOR i__ = 1 TO len DO
		a[i__] = RAD_2_DEG * a[i__]
	ENDFOR
END arr_rad2deg




ROUTINE arr_deg2rad
VAR
	i__          : INTEGER
BEGIN
	FOR i__ = 1 TO len DO
		a[i__] = DEG_2_RAD * a[i__]
	ENDFOR
END arr_deg2rad




ROUTINE jpos_to_jdta
VAR
	stat__       : INTEGER
	i__          : INTEGER
BEGIN
	stat__ = 0

	-- TODO: check 'len(joint_data) == 10'

	CNV_JPOS_REL(jpos, joint_data, stat__)
	IF (stat__ <> 0) THEN RETURN (-stat__); ENDIF

	-- convert units per axis from Fanuc to ROS using conversion factors in
	-- group info struct
	FOR i__ = 1 TO ARRAY_LEN(joint_data) DO
		IF (i__ <= grp_nfo.num_axes) THEN
			joint_data[i__] = joint_data[i__] * grp_nfo.cnv_fa_toros[i__]
		ELSE
			joint_data[i__] = 0.0
		ENDIF
	ENDFOR


	IF (RDO[1] = ON) THEN 
		joint_data[7] = 1
	ELSE
		joint_data[7] = 0
	ENDIF

	RETURN (stat__)
END jpos_to_jdta




ROUTINE jdta_to_jpos
VAR
	stat__       : INTEGER
	i__          : INTEGER
BEGIN
	stat__ = 0

	-- TODO: check 'len(joint_data) == 10'

	-- convert units per axis from ROS to Fanuc using conversion factors in
	-- group info struct
	FOR i__ = 1 TO ARRAY_LEN(joint_data) DO
		IF (i__ <= grp_nfo.num_axes) THEN
			joint_data[i__] = joint_data[i__] * grp_nfo.cnv_ros_tofa[i__]
		ELSE
			joint_data[i__] = 0.0
		ENDIF
	ENDFOR

	CNV_REL_JPOS(joint_data, jpos, stat__)
	IF (stat__ <> 0) THEN RETURN (-stat__); ENDIF

	RETURN (stat__)
END jdta_to_jpos




ROUTINE rf_ld_grpnfo
CONST
	FILE_ILL_PRM =   2032  -- FILE-032 Illegal parameter
VAR
	stat__       : INTEGER
	i__          : INTEGER
	num_grps__   : INTEGER
	grp_num__    : INTEGER
BEGIN
	stat__     = 0
	i__        = 1
	num_grps__ = 0
	grp_num__  = 0

	-- sentinel
	grp_nfo.group_num = -1

	-- here we check against MAX_NUM_GRPS, as there could be a group with an id
	-- that is higher than the actual nr of defined motion group structures,
	-- but the maximum valid id is still expected to be MAX_NUM_GRPS.
	IF (grp_id < 1) OR (grp_id > MAX_NUM_GRPS) THEN
		stat__ = FILE_ILL_PRM
		GOTO lbl_xit_lgi
	ENDIF

	-- retrieve nr of motion groups in the system
	GET_VAR(0, '*SYSTEM*', '$SCR.$NUM_GROUP', num_grps__, stat__)
	IF (stat__ <> 0) THEN GOTO lbl_xit_lgi; ENDIF

	-- try all groups, search for a match with 'grp_id'
	FOR i__ = 1 TO num_grps__ DO

		-- see if this is the group we're looking for
		GET_VAR(0, '*SYSTEM*', '$SCR_GRP[' + INT_TO_STRG(i__) + '].$GROUP_NUM', grp_num__, stat__)
		IF (stat__ <> 0) THEN GOTO lbl_xit_lgi; ENDIF
		IF (grp_num__ <> grp_id) THEN GOTO lbl_cnt_lgi; ENDIF

		-- this is our group, load info
		grp_nfo.group_idx = i__
		grp_nfo.group_num = grp_num__

		-- total nr of axes in this motion group
		GET_VAR(0, '*SYSTEM*', '$SCR_GRP[' + INT_TO_STRG(i__) + '].$NUM_AXES', grp_nfo.num_axes, stat__)
		IF (stat__ <> 0) THEN GOTO lbl_xit_lgi; ENDIF

		-- nr of integrated axes in this motion group
		GET_VAR(0, '*SYSTEM*', '$SCR_GRP[' + INT_TO_STRG(i__) + '].$NUM_ROB_AXS', grp_nfo.num_rob_axes, stat__)
		IF (stat__ <> 0) THEN GOTO lbl_xit_lgi; ENDIF

		-- info on axis type (rotary vs linear)
		GET_VAR(0, '*SYSTEM*', '$SCR_GRP[' + INT_TO_STRG(i__) + '].$ROTARY_AXS', grp_nfo.rotary_axs, stat__)
		IF (stat__ <> 0) THEN GOTO lbl_xit_lgi; ENDIF

		-- table of axis interaction factors
		GET_VAR(0, '*SYSTEM*', '$MRR_GRP[' + INT_TO_STRG(i__) + '].$AXS_COUPLE', grp_nfo.axs_couple, stat__)
		IF (stat__ <> 0) THEN GOTO lbl_xit_lgi; ENDIF

	lbl_cnt_lgi::
		-- poor-mans continue
	ENDFOR

	-- make sure we've found the requested group
	IF (grp_nfo.group_num < 0) THEN
		stat__ = FILE_ILL_PRM
		GOTO lbl_xit_lgi
	ENDIF

	-- determine Fanuc->ROS and ROS->Fanuc per-axis conversion factors
	FOR i__ = 1 TO MAX_GRP_AXES DO
		IF (grp_nfo.rotary_axs[i__] = TRUE) THEN
			-- revolute
			grp_nfo.cnv_fa_toros[i__] = DEG_2_RAD  -- degrees -> radians
			grp_nfo.cnv_ros_tofa[i__] = RAD_2_DEG  -- radians -> degrees

		ELSE
			-- linear
			grp_nfo.cnv_fa_toros[i__] = 1e-3       -- mms -> metres
			grp_nfo.cnv_ros_tofa[i__] = 1e3        -- metres -> mms
		ENDIF
	ENDFOR


lbl_xit_lgi::
	RETURN (-ABS(stat__))
END rf_ld_grpnfo
